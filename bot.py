import json
import logging
import os
from datetime import datetime
from typing import Dict, Any, Optional

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
)

from lessons import LESSONS
from dotenv import load_dotenv

# Google Sheets
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
if not BOT_TOKEN:
    logger.error(
        "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞: BOT_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω"
    )
    exit(1)

# Google Sheets setup
GOOGLE_CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE", "credentials.json")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞")
GOOGLE_RESPONSES_SHEET_NAME = os.getenv(
    "GOOGLE_RESPONSES_SHEET_NAME", "–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Google Sheets
gc = None
users_sheet = None
responses_sheet = None


async def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global gc, users_sheet, responses_sheet
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            GOOGLE_CREDENTIALS_FILE, scope
        )
        gc = gspread.authorize(creds)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_sheet = gc.open(GOOGLE_SHEET_NAME).sheet1
        logger.info("‚úÖ Google Sheets (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
        if not users_sheet.get_all_values():
            users_sheet.append_row(
                [
                    "user_id",
                    "username",
                    "current_lesson",
                    "paused",
                    "last_lesson_sent",
                    "completed",
                    "created_at",
                ]
            )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤
        try:
            responses_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet(
                GOOGLE_RESPONSES_SHEET_NAME
            )
        except gspread.WorksheetNotFound:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            responses_sheet = gc.open(GOOGLE_SHEET_NAME).add_worksheet(
                title=GOOGLE_RESPONSES_SHEET_NAME, rows="1000", cols="20"
            )

        logger.info("‚úÖ Google Sheets (–æ—Ç–≤–µ—Ç—ã) —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
        if not responses_sheet.get_all_values():
            responses_sheet.append_row(
                [
                    "timestamp",
                    "user_id",
                    "username",
                    "lesson_index",
                    "lesson_title",
                    "response_text",
                    "response_type",
                ]
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        users_sheet = None
        responses_sheet = None


def get_user_from_sheet(user_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets"""
    if not users_sheet:
        return None

    try:
        all_values = users_sheet.get_all_values()
        if len(all_values) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            return None

        headers = all_values[0]
        for row in all_values[1:]:
            if row and row[0] == user_id:  # user_id –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
                user_data = dict(zip(headers, row))
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                user_data["current_lesson"] = int(user_data.get("current_lesson", 0))
                user_data["paused"] = user_data.get("paused", "False").lower() == "true"
                user_data["completed"] = (
                    user_data.get("completed", "False").lower() == "true"
                )
                return user_data
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets: {e}")
        return None


def save_user_to_sheet(user_data: Dict[str, Any]) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
    if not users_sheet:
        return

    try:
        all_values = users_sheet.get_all_values()
        headers = all_values[0] if all_values else []

        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not headers:
            headers = [
                "user_id",
                "username",
                "current_lesson",
                "paused",
                "last_lesson_sent",
                "completed",
                "created_at",
            ]
            users_sheet.append_row(headers)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [
            str(user_data.get("user_id", "")),
            str(user_data.get("username", "")),
            str(user_data.get("current_lesson", 0)),
            str(user_data.get("paused", False)),
            str(user_data.get("last_lesson_sent", "")),
            str(user_data.get("completed", False)),
            str(user_data.get("created_at", datetime.now().isoformat())),
        ]

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        user_id = str(user_data.get("user_id"))
        existing_row_index = None
        for i, row in enumerate(all_values[1:], start=2):
            if row and row[0] == user_id:
                existing_row_index = i
                break

        if existing_row_index:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            users_sheet.update(
                f"A{existing_row_index}:G{existing_row_index}", [row_data]
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            users_sheet.append_row(row_data)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets: {e}")


def save_response_to_sheet(
    user_id: str,
    username: str,
    lesson_index: int,
    lesson_title: str,
    response_text: str,
    response_type: str,
) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
    if not responses_sheet:
        return

    try:
        timestamp = datetime.now().isoformat()
        responses_sheet.append_row(
            [
                timestamp,
                user_id,
                username,
                str(lesson_index),
                lesson_title,
                response_text,
                response_type,
            ]
        )
        logger.info(
            f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —É—Ä–æ–∫—É {lesson_index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ Google Sheets: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "unknown"

    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets
        user_data = {
            "user_id": user_id,
            "username": username,
            "current_lesson": 0,
            "paused": False,
            "last_lesson_sent": None,
            "completed": False,
            "created_at": datetime.now().isoformat(),
        }
        save_user_to_sheet(user_data)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Google Sheets")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    keyboard = [[KeyboardButton("–ù–∞—á–∞—Ç—å –∫—É—Ä—Å")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–∏–∑–∞–π–Ω—É –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –æ—Ç –õ–µ–±–µ–¥–µ–≤–æ–π –ò—Ä–∏–Ω—ã.\n\n"
        "üìÖ –î–∞ –¥–∞ —Ç–æ–π —Å–∞–º–æ–π. –ò–º–µ–Ω–Ω–æ –æ–Ω–∞ —Å–¥–µ–ª–∞–ª–∞ –¥–∏–∑–∞–π–Ω –ò–≤–ú–æ–ª–æ–∫–æ–∑–∞–≤–æ–¥—É –∏ —Ç–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É –¥–æ–º–∞!\n\n"
        "üéÅ –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É—Ä—Å–∞ ‚Äî –ø–æ–ª—É—á–∏—à—å —á–µ–∫-–ª–∏—Å—Ç ‚Äú7 —à–∞–≥–æ–≤ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—å–µ—Ä—É‚Äù + —Å–∫–∏–¥–∫—É 20% –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ ‚Üí ‚Äú–ù–∞—á–∞—Ç—å –∫—É—Ä—Å‚Äù",
        reply_markup=reply_markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∫—É—Ä—Å"
async def handle_start_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "unknown"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    user_data = get_user_from_sheet(user_id)

    if not user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if user_data.get("paused", False):
        await update.message.reply_text(
            "–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /resume, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data["paused"] = False
    user_data["last_lesson_sent"] = datetime.now().isoformat()
    save_user_to_sheet(user_data)

    await send_lesson(update, context, user_id, 0)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ job_queue
async def send_lesson_job(context: CallbackContext):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ job_queue"""
    job = context.job
    user_id = job.data["user_id"]
    lesson_index = job.data["lesson_index"]
    await send_lesson(None, context, user_id, lesson_index)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞
async def send_lesson(update_or_context, context, user_id, lesson_index):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
    if not LESSONS:
        logger.warning("‚ùå –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
        return

    if lesson_index >= len(LESSONS):
        return

    lesson = LESSONS[lesson_index]

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_from_sheet(user_id)
    if not user_data:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã
    if user_data.get("paused", False):
        return

    user_data["current_lesson"] = lesson_index
    save_user_to_sheet(user_data)

    message_text = f"{lesson['title']}\n\n{lesson['text']}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if isinstance(update_or_context, Update):
            await update_or_context.message.reply_text(message_text)
        else:
            await context.bot.send_message(chat_id=int(user_id), text=message_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return

    # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–∫ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
    if lesson.get("is_final"):
        user_data["completed"] = True
        save_user_to_sheet(user_data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "unknown"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    user_data = get_user_from_sheet(user_id)

    if not user_data or user_data.get("current_lesson", -1) == -1:
        return

    current_lesson_index = user_data["current_lesson"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if current_lesson_index >= len(LESSONS):
        return

    lesson = LESSONS[current_lesson_index]

    # –õ–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    response_text = update.message.text or ""
    response_type = "text"
    if update.message.photo:
        response_text = "[–§–û–¢–û]"
        response_type = "photo"
    elif update.message.voice:
        response_text = "[–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï]"
        response_type = "voice"
    elif update.message.document:
        response_text = "[–î–û–ö–£–ú–ï–ù–¢]"
        response_type = "document"

    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç {user_id}: {response_text}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
    save_response_to_sheet(
        user_id=user_id,
        username=username,
        lesson_index=current_lesson_index,
        lesson_title=lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        response_text=response_text,
        response_type=response_type,
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    if not lesson.get("is_final"):
        next_lesson_index = current_lesson_index + 1
        user_data["current_lesson"] = next_lesson_index
        user_data["last_lesson_sent"] = datetime.now().isoformat()
        save_user_to_sheet(user_data)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Äî —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞)
        try:
            context.job_queue.run_once(
                send_lesson_job,
                when=5,
                data={"user_id": user_id, "lesson_index": next_lesson_index},
            )
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ üéØ"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –¢—ã –∫—Ä—É—Ç(–∞) üôå")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–æ—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handle_response
    pass


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "unknown"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    user_data = get_user_from_sheet(user_id)

    if not user_data or user_data.get("current_lesson", -1) == -1:
        return

    current_lesson_index = user_data["current_lesson"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if current_lesson_index >= len(LESSONS):
        return

    lesson = LESSONS[current_lesson_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç
    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
    save_response_to_sheet(
        user_id=user_id,
        username=username,
        lesson_index=current_lesson_index,
        lesson_title=lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        response_text="[–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï]",
        response_type="voice",
    )

    await update.message.reply_text(
        "üéôÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username or "unknown"

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    user_data = get_user_from_sheet(user_id)

    if not user_data or user_data.get("current_lesson", -1) == -1:
        return

    current_lesson_index = user_data["current_lesson"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if current_lesson_index >= len(LESSONS):
        return

    lesson = LESSONS[current_lesson_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç
    document_name = (
        update.message.document.file_name if update.message.document else "–î–æ–∫—É–º–µ–Ω—Ç"
    )
    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_id}: {document_name}")
    save_response_to_sheet(
        user_id=user_id,
        username=username,
        lesson_index=current_lesson_index,
        lesson_title=lesson.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        response_text=f"[–î–û–ö–£–ú–ï–ù–¢: {document_name}]",
        response_type="document",
    )

    await update.message.reply_text("üìÑ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ.")


# –ö–æ–º–∞–Ω–¥–∞ /pause
async def pause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    user_data = get_user_from_sheet(user_id)

    if user_data:
        user_data["paused"] = True
        save_user_to_sheet(user_data)
        await update.message.reply_text(
            "–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /resume, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∫—É—Ä—Å —Å /start")


# –ö–æ–º–∞–Ω–¥–∞ /resume
async def resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    user_data = get_user_from_sheet(user_id)

    if user_data:
        user_data["paused"] = False
        save_user_to_sheet(user_data)
        current_lesson = user_data["current_lesson"]
        await update.message.reply_text("–ö—É—Ä—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫—É—Ä—Å
        if user_data.get("completed", False):
            await update.message.reply_text("–ö—É—Ä—Å —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ")
            return

        await send_lesson(update, context, user_id, current_lesson)
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∫—É—Ä—Å —Å /start")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
async def main():
    # –°–æ–∑–¥–∞—ë–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: job_queue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ None
    if application.job_queue is None:
        logger.error("‚ùå JobQueue –Ω–µ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
        return

    logger.info("‚úÖ JobQueue —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    await init_google_sheets()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pause", pause))
    application.add_handler(CommandHandler("resume", resume))
    application.add_handler(
        MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å –∫—É—Ä—Å$"), handle_start_course)
    )
    application.add_handler(MessageHandler(filters.TEXT, handle_response))
    application.add_handler(MessageHandler(filters.PHOTO, handle_response))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    async with application:
        await application.start()
        await application.updater.start_polling()
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º 1 —á–∞—Å


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
